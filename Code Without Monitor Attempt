#TESTING NOTES
#ALL PARTS FUNCTION AND REACT TO INPUTS PROPERLY
#HOWEVER, IT CAN LAG AND FAVOR ONE INPUT OVER THE OTHER.
#IS THERE A WAY TO FIX SPEED ISSUE?

#Attempt at running the code without monitor, keyboard, and mouse
sudo nano /home/pi/.bashrc

if [ -f /home/pi/.bash_aliases ]; then
    . /home/pi/.bash_aliases
fi

if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

xhost +

echo "Running at boot"
sudo python /home/pi/CombinationAttempt.py

sudo reboot


#imports
import RPi.GPIO as GPIO
import time

#Pins setup. Plug in instructions listed
Vibrator = 12  #Red wire on vibrator to GPIO 12
TRIG = 17		#TRIG on distance sensor to GPIO 17
ECHO = 18		#ECHO on distance sensor to GPIO 18
BuzzerPin = 27  #SIG on active buzzer to GPIO 27
DHTPIN = 26 #SIG on humiditure to GPIO 26

#Vibrator Setup

def setupVibrator():
    GPIO.setup(Vibrator, GPIO.OUT)
    GPIO.output(Vibrator, GPIO.LOW)	
	
    
def vibrate(x):
    GPIO.output(Vibrator, GPIO.HIGH)
    time.sleep(x)
    GPIO.output(Vibrator, GPIO.LOW)
    time.sleep(x)

#Buzzer setup

def setupBuzzer():
    GPIO.setup(TRIG, GPIO.OUT)
    GPIO.setup(ECHO, GPIO.IN)
    GPIO.setup(BuzzerPin, GPIO.OUT)
    GPIO.output(BuzzerPin, GPIO.HIGH)

def distance():
    GPIO.output(TRIG, 0)
    time.sleep(0.02)

    GPIO.output(TRIG, 1)
    time.sleep(0.01)
    GPIO.output(TRIG, 0)

    while GPIO.input(ECHO) == 0:
        pass
    time1 = time.time()
    while GPIO.input(ECHO) == 1:
        pass
    time2 = time.time()

    during = time2 - time1
    return during * 340 / 2 * 100

def beep(x):
    GPIO.output(BuzzerPin, GPIO.LOW)
    time.sleep(x)
    GPIO.output(BuzzerPin, GPIO.HIGH)
    time.sleep(x)

#humiditure setup
#!/usr/bin/env python3



GPIO.setmode(GPIO.BCM)

MAX_UNCHANGE_COUNT = 100

STATE_INIT_PULL_DOWN = 1
STATE_INIT_PULL_UP = 2
STATE_DATA_FIRST_PULL_DOWN = 3
STATE_DATA_PULL_UP = 4
STATE_DATA_PULL_DOWN = 5

def read_dht11_dat():
	GPIO.setup(DHTPIN, GPIO.OUT)
	GPIO.output(DHTPIN, GPIO.HIGH)
	time.sleep(0.05)
	GPIO.output(DHTPIN, GPIO.LOW)
	time.sleep(0.02)
	GPIO.setup(DHTPIN, GPIO.IN, GPIO.PUD_UP)

	unchanged_count = 0
	last = -1
	data = []
	while True:
		current = GPIO.input(DHTPIN)
		data.append(current)
		if last != current:
			unchanged_count = 0
			last = current
		else:
			unchanged_count += 1
			if unchanged_count > MAX_UNCHANGE_COUNT:
				break

	state = STATE_INIT_PULL_DOWN

	lengths = []
	current_length = 0

	for current in data:
		current_length += 1

		if state == STATE_INIT_PULL_DOWN:
			if current == GPIO.LOW:
				state = STATE_INIT_PULL_UP
			else:
				continue
		if state == STATE_INIT_PULL_UP:
			if current == GPIO.HIGH:
				state = STATE_DATA_FIRST_PULL_DOWN
			else:
				continue
		if state == STATE_DATA_FIRST_PULL_DOWN:
			if current == GPIO.LOW:
				state = STATE_DATA_PULL_UP
			else:
				continue
		if state == STATE_DATA_PULL_UP:
			if current == GPIO.HIGH:
				current_length = 0
				state = STATE_DATA_PULL_DOWN
			else:
				continue
		if state == STATE_DATA_PULL_DOWN:
			if current == GPIO.LOW:
				lengths.append(current_length)
				state = STATE_DATA_PULL_UP
			else:
				continue
	if len(lengths) != 40:
		#print ("Data not good, skip")
		return False

	shortest_pull_up = min(lengths)
	longest_pull_up = max(lengths)
	halfway = (longest_pull_up + shortest_pull_up) / 2
	bits = []
	the_bytes = []
	byte = 0

	for length in lengths:
		bit = 0
		if length > halfway:
			bit = 1
		bits.append(bit)
	#print ("bits: %s, length: %d" % (bits, len(bits)))
	for i in range(0, len(bits)):
		byte = byte << 1
		if (bits[i]):
			byte = byte | 1
		else:
			byte = byte | 0
		if ((i + 1) % 8 == 0):
			the_bytes.append(byte)
			byte = 0
	#print (the_bytes)
	checksum = (the_bytes[0] + the_bytes[1] + the_bytes[2] + the_bytes[3]) & 0xFF
	if the_bytes[4] != checksum:
		#print ("Data not good, skip")
		return False

	return the_bytes[0], the_bytes[2]
	
#Code Main
def main():
	print ("Raspberry Pi wiringPi DHT11 Temperature test program\n")
	setupVibrator() #set up vibrator
	setupBuzzer() #Set up Buzzer
	while True:
		result = read_dht11_dat()
		if result:
			humidity, temperature = result
			print ("humidity: %s %%,  Temperature: %s C`" % (humidity, temperature))
			if humidity > 60:
				print ("water detected!")
				vibrate(1.0)
		dis = distance()	
		print(dis, 'cm')

		if dis <= 60 and dis >= 30:
			print("Buzzer activated!")
			beep(1.0)  # You can adjust the beep duration as needed
        
		if dis < 30:
			print("Buzzer activated!")
			beep(0.11) 

def destroy():
	Buzz.stop()
	GPIO.output(Vibrator, 1)        # Set Vibrator pin to High
	GPIO.cleanup()

if __name__ == '__main__':
	try:
		main()
	except KeyboardInterrupt:
		destroy() 
