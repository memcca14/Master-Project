import RPi.GPIO as GPIO
import time
import threading

# Pins setup. Plug in instructions listed
Vibrator = 12  # Red wire on vibrator to GPIO 12
TRIG = 17       # TRIG on distance sensor to GPIO 17
ECHO = 18       # ECHO on distance sensor to GPIO 18
BuzzerPin = 27  # SIG on active buzzer to GPIO 27
DHTPIN = 26     # SIG on humidity sensor to GPIO 26

# Your existing functions...

# Create a lock to synchronize access to GPIO resources
gpio_lock = threading.Lock()

# DHT11 thread
def dht11_thread():
    while True:
        with gpio_lock:
            result = read_dht11_dat()
        if result:
            humidity, temperature = result
            print(f"Humidity: {humidity}%, Temperature: {temperature}Â°C")
            if humidity > 60:
                print("Water detected!")
                with gpio_lock:
                    vibrate(1.0)
        time.sleep(1)

# Ultrasonic sensor thread
def ultrasonic_thread():
    while True:
        with gpio_lock:
            dis = distance()
        print(f"Distance: {dis} cm")

        if 30 <= dis <= 60:
            print("Buzzer activated!")
            with gpio_lock:
                beep(1.0)

        if dis < 30:
            print("Buzzer activated!")
            with gpio_lock:
                beep(0.11)
        time.sleep(1)

# Your existing functions...

if __name__ == '__main__':
    try:
        # Initialize GPIO
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(Vibrator, GPIO.OUT)
        GPIO.setup(TRIG, GPIO.OUT)
        GPIO.setup(ECHO, GPIO.IN)
        GPIO.setup(BuzzerPin, GPIO.OUT)
        GPIO.setup(DHTPIN, GPIO.IN)

        # Create threads for each sensor
        dht11_thread = threading.Thread(target=dht11_thread)
        ultrasonic_thread = threading.Thread(target=ultrasonic_thread)

        # Start the threads
        dht11_thread.start()
        ultrasonic_thread.start()

        # Wait for the threads to finish (if needed)
        dht11_thread.join()
        ultrasonic_thread.join()

    except KeyboardInterrupt:
        GPIO.cleanup()
 
